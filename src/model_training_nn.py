# -*- coding: utf-8 -*-
"""Model_Training_NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iKDZ09UXXUkpFIptYdzt_bijh5lVJfuU
"""

# notebooks/Model_Training_NN.ipynb

# Instalación de dependencias necesarias
!pip install pandas numpy scikit-learn tensorflow

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import matplotlib.pyplot as plt
import os

# Crear directorios para guardar modelos si no existen
os.makedirs('../models', exist_ok=True)
os.makedirs('../reports', exist_ok=True)

# Cargar los datos
train_data = pd.read_csv('../data/train.csv')

# Preprocesamiento de datos: Imputación de valores nulos en columnas numéricas
numeric_cols = train_data.select_dtypes(include=[np.number]).columns
train_data_imputed = train_data.copy()
train_data_imputed[numeric_cols] = train_data[numeric_cols].fillna(train_data[numeric_cols].mean())

# Selección de características y variable objetivo
features = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF']
target = 'SalePrice'

X = train_data_imputed[features]
y = train_data_imputed[target]

# Estandarización de características
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# División de datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Definición del modelo de red neuronal
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)
])

# Compilación del modelo
model.compile(optimizer='adam', loss='mse')

# Entrenamiento del modelo
history = model.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))

# Guardar el modelo entrenado
model.save('../models/nn_model.h5')

# Predicciones y evaluación
y_pred = model.predict(X_test).flatten()
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f'RMSE inicial: {rmse}')

# Guardar los resultados en un archivo
with open('../reports/training_report_nn.txt', 'w') as f:
    f.write(f'RMSE inicial: {rmse}\n')

# Gráfica de la pérdida durante el entrenamiento
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Pérdida de entrenamiento')
plt.plot(history.history['val_loss'], label='Pérdida de validación')
plt.title('Pérdida durante el entrenamiento')
plt.xlabel('Época')
plt.ylabel('Pérdida')
plt.legend()
plt.grid(True)
plt.savefig('../reports/loss_curve.png')
plt.show()

# Gráfica de predicciones vs valores reales
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.xlabel('Valores Reales')
plt.ylabel('Predicciones')
plt.title('Predicciones vs Valores Reales')
plt.grid(True)
plt.savefig('../reports/pred_vs_real.png')
plt.show()